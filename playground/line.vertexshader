#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;

//out VS_OUT
//{

//} vs_out;

// Values that stay constant for the whole mesh.
//uniform mat4 MV;
uniform mat4 MVP;
//uniform mat4 ViewMatrix;


uniform sampler2D myHeightmap;


void main(){
    //vec4 P = ViewMatrix*  vec4(vertexPosition_modelspace,1.0);
    //vec4 P = MV*  vec4(vertexPosition_modelspace,1.0);

    //vec3 N = normalize(mat3(MV)*normal);
    //vec3 T = normalize(mat3(MV)*tangent);

    //vec3 B = cross(N,T);

    //dont move lightsource with cam
    //vec3 L = (ViewMatrix* vec4(light_pos,1.0)).xyz - P.xyz;
    //vec3 L = (vec4(light_pos,1.0)).xyz - P.xyz;
    //vec3 V = -P.xyz;
    //vs_out.lightDir = normalize(vec3(dot(L, T), dot(L, B), dot(L, N)));
    //vs_out.lightDir = vec3(0,1,1);

    //vs_out.eyeDir   = normalize(vec3(dot(V, T), dot(V, B), dot(V, N)));

    //vs_out.UV = vertexUV;

    //gl_Position = proj_matrix*P


	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4((vertexPosition_modelspace + normal*0.01 + 0.010 * normal * texture( myHeightmap, vertexUV ).x),1); //0.015

}

