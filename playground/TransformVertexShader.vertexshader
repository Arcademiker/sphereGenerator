#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;

// Output data ; will be interpolated for each fragment.
//out vec2 UV; //vec3

out VS_OUT
{
    vec2 UV;
    vec3 eyeDir;
    vec3 lightDir;
} vs_out;

// Values that stay constant for the whole mesh.
//uniform mat4 M;
uniform mat4 MV;
uniform mat4 MVP;
uniform vec3 light_pos = vec3(30.0, 0.0, 1000.0);
uniform mat4 ViewMatrix;

/*
mat4 rotationMatrix(float angle, vec3 axis)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}
*/

//uniform sampler2D myTexture;
uniform sampler2D myHeightmap;
//uniform sampler2D myNormal;

void main(){
    //vec4 P = ViewMatrix*  vec4(vertexPosition_modelspace,1.0);
    vec4 P = MV*  vec4(vertexPosition_modelspace,1.0);

    //rotate light with planet:
    //vec3 light_pos = ((rotationMatrix(0.01f,vec3(0.1f,1.0f,0.0f))) * vec4(light_pos, 1.0)).rgb;

    vec3 N = normalize(mat3(MV)*normal);
    vec3 T = normalize(mat3(MV)*tangent);

    vec3 B = cross(N,T);

    //dont move lightsource with cam
    vec3 L = (ViewMatrix* vec4(light_pos,1.0)).xyz - P.xyz;
    //vec3 L = (vec4(light_pos,1.0)).xyz - P.xyz;
    vec3 V = -P.xyz;
    vs_out.lightDir = normalize(vec3(dot(L, T), dot(L, B), dot(L, N)));
    //vs_out.lightDir = vec3(0,1,1);

    vs_out.eyeDir   = normalize(vec3(dot(V, T), dot(V, B), dot(V, N)));

    vs_out.UV = vertexUV;

    //gl_Position = proj_matrix*P


	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4((vertexPosition_modelspace + 0.01 * normal * texture( myHeightmap, vertexUV ).x),1); //0.015

}

