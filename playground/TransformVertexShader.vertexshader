#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;

// Output data ; will be interpolated for each fragment.
//out vec2 UV; //vec3

out VS_OUT
{
    vec2 UV;
    vec3 eyeDir;
    vec3 lightDir;
} vs_out;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform mat4 MVP;
uniform vec3 light_pos = vec3(0.0, 0.0, 10.0);

uniform sampler2D myTexture;
uniform sampler2D myHeightmap;
uniform sampler2D myNormal;

void main(){
    vec4 P = MV*  vec4(vertexPosition_modelspace,1.0);

    vec3 N = normalize(mat3(MV)*normal);
    vec3 T = normalize(mat3(MV)*tangent);

    vec3 B = cross(N,T);

    vec3 L = light_pos - P.xyz;
    vec3 V = -P.xyz;
    vs_out.lightDir = normalize(vec3(dot(L, T), dot(L, B), dot(L, N)));
    //vs_out.lightDir = vec3(0,1,1);

    vs_out.eyeDir =   normalize(vec3(dot(V, T), dot(V, B), dot(V, N)));

    vs_out.UV = vertexUV;

    //gl_Position = proj_matrix*P




	// Output position of the vertex, in clip space : MVP * position

	gl_Position =  MVP * vec4((vertexPosition_modelspace + 0.01 * normal * texture( myHeightmap, vertexUV ).x),1);
	
	// UV of the vertex. No special space for this one.
	//UV =  vertexUV; //vertexPosition_modelspace;
}

