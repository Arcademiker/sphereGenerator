#version 330 core

// Interpolated values from the vertex shaders
in VS_OUT
{
    vec2 UV;
    vec3 eyeDir;
    vec3 lightDir;
} fs_in;

//in vec2 UV; //vec3

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTexture;
//uniform sampler2D myHeightmap;
uniform sampler2D myNormal;
uniform sampler2D mySpecular;
uniform sampler2D myTexture2;

void main(){
    vec3 V = normalize(fs_in.eyeDir);
    vec3 L = normalize(fs_in.lightDir);

    //vec2 UVfrag = fs_in.UV;// * 3;

    vec3 N = normalize(texture(myNormal, fs_in.UV).rgb * 2.0 - vec3(1.0,1.0,1.0));
    vec3 R = reflect(-L,N); // reflect(-L,N) = -L - 2.0 * dot(N, -L) * N;

    vec3 diffuse_albedo = texture(myTexture, fs_in.UV).rgb;
    float illum = clamp(dot(N,L), 0.0, 1.0);
    vec3 diffuse =  max(illum * diffuse_albedo , (max(0.4-2.0*illum*illum,0.0)*2.0) * texture(myTexture2, fs_in.UV).rgb-0.03);
    //vec3 diffuse = max(dot(N,L), 0.0) * diffuse_albedo;
    //Uncomment this to turn off diffuse shading
    //diffuse = vec3(0.0);

    vec3 specular_albedo = vec3(0.95,0.7,0.4);

    //vec3 specular = pow(clamp(dot(R, V),0.0,1.0), 5.0) * specular_albedo  *  texture(mySpecular, UVfrag).xyz * vec3(1,0.7,0.4); //yello light
    vec3 specular = pow(clamp(dot(R, V),0.0,1.0), 10.0) * (specular_albedo+diffuse_albedo*0.8)  *  texture(mySpecular, fs_in.UV).xyz ;//* vec3(1,0.7,0.4); //yello light

    //vec3 specular = max(pow(dot(R, V), 5.0), 0.0) * specular_albedo;
    //specular = vec3(0.0);

    color = vec4( diffuse +    specular , 1.0);
    //color = vec4(texture(myNormal, fs_in.UV).rgb,1.0);
}